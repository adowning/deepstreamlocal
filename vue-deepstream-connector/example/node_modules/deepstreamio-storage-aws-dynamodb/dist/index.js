'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 *
 */

var DynamoDbConnector = function (_EventEmitter) {
	_inherits(DynamoDbConnector, _EventEmitter);

	/**
  * Constructor
  *
  * @param {Object} options - "table" required, "db" optional, "region" optional
  *
  * @constructor
  */

	function DynamoDbConnector(options) {
		_classCallCheck(this, DynamoDbConnector);

		// Basic properties

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DynamoDbConnector).call(this));

		_this.isReady = true;
		_this.name = _package2.default.name;
		_this.version = _package2.default.version;

		// Set region
		if (options.region) {
			_awsSdk2.default.config.update({
				region: options.region
			});
		}

		// Set table
		if (!options.table) {
			throw new Error('"table" option is required');
		}
		_this.table = options.table;

		// Set DynamoDb instance
		if (!options.db) {
			options.db = new _awsSdk2.default.DynamoDB.DocumentClient();
		}
		_this.db = options.db;

		// Set ready
		process.nextTick(function () {
			_this.emit('ready');
		});
		return _this;
	}

	/**
  * Writes a value to the cache.
  *
  * @param {String}   id
  * @param {Object}   data
  * @param {Function} callback Should be called with null for successful set operations or with an error message string
  *
  * @private
  * @returns {void}
  */


	_createClass(DynamoDbConnector, [{
		key: 'set',
		value: function set(id, data, cb) {
			var params = {
				TableName: this.table,
				Item: {
					id: id,
					data: data
				}
			};
			// console.log('Set', params);
			this.db.put(params, function (err) {
				cb(err ? err.message : null);
			});
		}

		/**
   * Retrieves a value from the cache
   *
   * @param {String}   id
   * @param {Function} callback Will be called with null and the stored object
   *                            for successful operations or with an error message string
   *
   * @private
   * @returns {void}
   */

	}, {
		key: 'get',
		value: function get(id, cb) {
			var params = {
				TableName: this.table,
				Key: {
					id: id
				}
			};
			// console.log('Get', params);
			this.db.get(params, function (err, res) {
				if (err) {
					return cb(err.message);
				}
				if (!res || !res.Item) {
					return cb(null, null);
				}
				return cb(null, res.Item.data);
			});
		}

		/**
   * Deletes an entry from the cache.
   *
   * @param   {String}   id
   * @param   {Function} callback Will be called with null for successful deletions or with
   *                     an error message string
   *
   * @private
   * @returns {void}
   */

	}, {
		key: 'delete',
		value: function _delete(id, cb) {
			var params = {
				TableName: this.table,
				Key: {
					id: {
						S: id
					}
				}
			};
			this.db.delete(params, function (err) {
				cb(err ? err.message : null);
			});
		}
	}]);

	return DynamoDbConnector;
}(_events.EventEmitter);

exports.default = DynamoDbConnector;